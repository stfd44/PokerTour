rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isTournamentParticipant(tournamentData) {
      // Ensure registrations list exists before checking
      return 'registrations' in tournamentData && tournamentData.registrations.exists(p => p.id == request.auth.uid);
    }
    
    function onlyGamesChanged() {
      // Checks that the only field being modified is the 'games' array.
      // All other fields must remain identical.
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['games']);
    }

    // --- Rules ---
    match /teams/{teamId} {
      allow create: if isAuth();
      allow read: if isAuth();
      allow update: if isAuth(); // Any authenticated user can update (e.g., join/leave)
      allow delete: if isUser(resource.data.creatorId);
    }

    match /tournaments/{tournamentId} {
      allow create: if isAuth();
      allow read: if true; // Anyone can read tournament details

      allow update: if isAuth() && (
        // Rule 1: The creator can always update the tournament.
        isUser(resource.data.creatorId) ||
        // Rule 2: A registered participant can modify ONLY the 'games' array.
        // This allows players to start, pause, change blinds, etc., without being able
        // to change tournament-level details like name, buy-in, or status.
        (isTournamentParticipant(resource.data) && onlyGamesChanged())
      );
      
      allow delete: if isUser(resource.data.creatorId);
    }

    match /users/{userId} {
      allow read: if isAuth();
      allow create, update: if isUser(userId);
    }
  }
}
